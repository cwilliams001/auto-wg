#!/usr/bin/env python3

"""
Auto-WG Admin CLI Tool
Command-line interface for managing WireGuard clients
"""

import argparse
import json
import requests
import sys
import os
from urllib.parse import urljoin
import configparser
from pathlib import Path

class WGAdmin:
    def __init__(self, config_file=None):
        self.config_file = config_file or os.path.expanduser("~/.autowg/config")
        self.load_config()
    
    def load_config(self):
        """Load configuration from file"""
        config_path = Path(self.config_file)
        
        if not config_path.exists():
            print(f"‚ùå Config file not found: {self.config_file}")
            print("Run 'wg-admin setup' to create configuration")
            sys.exit(1)
        
        config = configparser.ConfigParser()
        config.read(self.config_file)
        
        try:
            self.server_url = config['server']['url']
            self.auth_key = config['server']['auth_key']
        except KeyError as e:
            print(f"‚ùå Missing config section: {e}")
            sys.exit(1)
    
    def save_config(self, server_url, auth_key):
        """Save configuration to file"""
        config_path = Path(self.config_file)
        config_path.parent.mkdir(parents=True, exist_ok=True)
        
        config = configparser.ConfigParser()
        config['server'] = {
            'url': server_url,
            'auth_key': auth_key
        }
        
        with open(self.config_file, 'w') as f:
            config.write(f)
        
        # Set secure permissions
        os.chmod(self.config_file, 0o600)
        print(f"‚úÖ Configuration saved to {self.config_file}")
    
    def make_request(self, endpoint, method='GET', data=None):
        """Make HTTP request to server"""
        url = urljoin(self.server_url, endpoint)
        headers = {'Authorization': self.auth_key}
        
        try:
            if method == 'POST':
                response = requests.post(url, headers=headers, json=data, timeout=30)
            else:
                response = requests.get(url, headers=headers, timeout=30)
            
            return response
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Connection error: {e}")
            sys.exit(1)
    
    def list_clients(self):
        """List all clients"""
        response = self.make_request('/list_clients')
        
        if response.status_code == 200:
            clients = response.json()
            
            if not clients:
                print("üìã No clients found")
                return
            
            print("üìã Client List:")
            print("-" * 50)
            for name, ip in clients.items():
                print(f"  {name:<20} {ip}")
        else:
            print(f"‚ùå Error: {response.json().get('error', 'Unknown error')}")
            sys.exit(1)
    
    def add_client(self, client_name):
        """Add a new client"""
        data = {'client_name': client_name}
        response = self.make_request('/generate_config', 'POST', data)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Client '{client_name}' added successfully")
            print(f"üìç Assigned IP: {result['ip']}")
            print("\nüìÑ Configuration:")
            print("-" * 50)
            print(result['config'])
            print("-" * 50)
            print(f"\nüíæ Save this config to /etc/wireguard/wg0.conf on your client device")
        else:
            error_msg = response.json().get('error', 'Unknown error')
            print(f"‚ùå Error adding client: {error_msg}")
            sys.exit(1)
    
    def check_health(self):
        """Check server health"""
        response = self.make_request('/health')
        
        if response.status_code == 200:
            result = response.json()
            status = result.get('status', 'unknown')
            timestamp = result.get('timestamp', 'unknown')
            
            if status == 'healthy':
                print(f"‚úÖ Server is healthy (checked at {timestamp})")
            else:
                print(f"‚ö†Ô∏è  Server status: {status} (checked at {timestamp})")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            sys.exit(1)
    
    def setup_config(self, server_url, auth_key):
        """Setup configuration interactively"""
        print("üîß Auto-WG Admin Setup")
        print("-" * 30)
        
        if not server_url:
            server_url = input("Server URL (e.g., https://wg.example.com): ").strip()
        
        if not auth_key:
            auth_key = input("Authentication key: ").strip()
        
        # Validate connection
        print("üîç Testing connection...")
        test_admin = WGAdmin.__new__(WGAdmin)
        test_admin.server_url = server_url
        test_admin.auth_key = auth_key
        
        try:
            response = test_admin.make_request('/health')
            if response.status_code == 200:
                print("‚úÖ Connection successful!")
            else:
                print(f"‚ö†Ô∏è  Connection test returned: {response.status_code}")
                if input("Continue anyway? (y/N): ").lower() != 'y':
                    sys.exit(1)
        except:
            print("‚ùå Connection test failed")
            if input("Continue anyway? (y/N): ").lower() != 'y':
                sys.exit(1)
        
        self.save_config(server_url, auth_key)
    
    def revoke_client(self, client_name):
        """Revoke a client's access"""
        print(f"üîí Revoking access for client: {client_name}")
        print("-" * 40)
        
        # Confirm revocation
        confirm = input(f"Are you sure you want to revoke '{client_name}'? This cannot be undone. (y/N): ")
        if confirm.lower() != 'y':
            print("Revocation cancelled")
            return
        
        data = {'client_name': client_name}
        response = self.make_request('/revoke_client', 'POST', data)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result.get('message', 'Client revoked successfully')}")
            print("")
            print("üîí Client access has been revoked and removed from the server")
            print("‚ö†Ô∏è  The client's WireGuard configuration is now invalid")
        elif response.status_code == 400:
            error_msg = response.json().get('error', 'Unknown error')
            if 'not found' in error_msg.lower():
                print(f"‚ùå Client '{client_name}' not found")
                print("\nüí° Use 'wg-admin list' to see available clients")
            else:
                print(f"‚ùå Error: {error_msg}")
        else:
            error_msg = response.json().get('error', 'Unknown error')
            print(f"‚ùå Error revoking client: {error_msg}")
            sys.exit(1)
    
    def show_detailed_status(self):
        """Show detailed client status with connection info"""
        print("üîç Auto-WG Detailed Status")
        print("-" * 50)
        
        # Check health
        health_response = self.make_request('/health')
        if health_response.status_code == 200:
            result = health_response.json()
            status = result.get('status', 'unknown')
            timestamp = result.get('timestamp', 'unknown')
            if status == 'healthy':
                print(f"Server Status: ‚úÖ {status} (checked at {timestamp})")
            else:
                print(f"Server Status: ‚ö†Ô∏è  {status} (checked at {timestamp})")
        else:
            print("Server Status: ‚ùå Unhealthy")
        
        # Get detailed client status
        status_response = self.make_request('/client_status')
        if status_response.status_code == 200:
            result = status_response.json()
            clients = result.get('clients', [])
            
            if not clients:
                print("\nüìã No clients found")
                return
            
            print(f"\nüìã Client Status ({len(clients)} total):")
            print("-" * 80)
            print(f"{'Name':<20} {'IP Address':<15} {'Status':<12} {'Last Handshake':<15} {'RX/TX'}")
            print("-" * 80)
            
            for client in clients:
                name = client.get('name', 'unknown')[:19]
                ip = client.get('ip', 'unknown')
                status = client.get('status', 'unknown')
                handshake = client.get('last_handshake', 'Never')[:14]
                rx = client.get('transfer_rx', '0 B')
                tx = client.get('transfer_tx', '0 B')
                
                if status == 'connected':
                    status_icon = "üü¢"
                else:
                    status_icon = "üî¥"
                
                routes_str = ", ".join(client.get('routes', [])) or "None"
                print(f"{name:<20} {ip:<15} {status_icon} {status:<10} {handshake:<15} {rx}/{tx}")
                if client.get('routes'):
                    print(f"{'  Routes:':<20} {routes_str}")
        else:
            print("\n‚ùå Unable to fetch detailed client status")
        
        print(f"\nConfig File: {self.config_file}")
        print(f"Server URL: {self.server_url}")
    
    def add_route(self, client_name, subnet):
        """Add a subnet route for a client"""
        print(f"üîó Adding subnet route for client: {client_name}")
        print(f"üìç Subnet: {subnet}")
        print("-" * 50)
        
        # Validate subnet format
        try:
            import ipaddress
            ipaddress.ip_network(subnet, strict=True)
        except ValueError:
            print(f"‚ùå Invalid subnet format: {subnet}")
            print("üí° Use CIDR notation like: 192.168.1.0/24")
            sys.exit(1)
        
        data = {'client_name': client_name, 'subnet': subnet}
        response = self.make_request('/add_route', 'POST', data)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result.get('message', 'Route added successfully')}")
            print("")
            print("üîó Subnet route configured successfully")
            print(f"üìç Client '{client_name}' can now route traffic for {subnet}")
            print("‚ö†Ô∏è  Client device must be configured to route the subnet")
        else:
            error_msg = response.json().get('error', 'Unknown error')
            print(f"‚ùå Error adding route: {error_msg}")
            sys.exit(1)
    
    def remove_route(self, client_name, subnet):
        """Remove a subnet route for a client"""
        print(f"üîó Removing subnet route for client: {client_name}")
        print(f"üìç Subnet: {subnet}")
        print("-" * 50)
        
        # Confirm removal
        confirm = input(f"Remove route {subnet} from '{client_name}'? (y/N): ")
        if confirm.lower() != 'y':
            print("Route removal cancelled")
            return
        
        data = {'client_name': client_name, 'subnet': subnet}
        response = self.make_request('/remove_route', 'POST', data)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result.get('message', 'Route removed successfully')}")
        else:
            error_msg = response.json().get('error', 'Unknown error')
            print(f"‚ùå Error removing route: {error_msg}")
            sys.exit(1)
    
    def list_routes(self, client_name=None):
        """List subnet routes for clients"""
        if client_name:
            print(f"üîó Routes for client: {client_name}")
        else:
            print("üîó All Client Routes")
        print("-" * 50)
        
        params = {'client_name': client_name} if client_name else {}
        response = self.make_request('/list_routes', 'GET')
        
        if response.status_code == 200:
            result = response.json()
            routes = result.get('routes', {})
            
            if not routes:
                if client_name:
                    print(f"üìã No routes configured for client '{client_name}'")
                else:
                    print("üìã No routes configured for any clients")
                return
            
            for client, client_routes in routes.items():
                if client_routes:
                    print(f"\nüñ•Ô∏è  {client}:")
                    for route in client_routes:
                        print(f"  üìç {route}")
                else:
                    print(f"\nüñ•Ô∏è  {client}: No routes")
        else:
            error_msg = response.json().get('error', 'Unknown error')
            print(f"‚ùå Error listing routes: {error_msg}")
            sys.exit(1)
    
    def show_status(self):
        """Show basic status (for backward compatibility)"""
        print("üîç Auto-WG Status")
        print("-" * 30)
        
        # Check health
        health_response = self.make_request('/health')
        if health_response.status_code == 200:
            result = health_response.json()
            print(f"Server Status: ‚úÖ {result.get('status', 'unknown')}")
        else:
            print("Server Status: ‚ùå Unhealthy")
        
        # Get client count
        clients_response = self.make_request('/list_clients')
        if clients_response.status_code == 200:
            clients = clients_response.json()
            print(f"Total Clients: {len(clients)}")
        else:
            print("Total Clients: ‚ùå Unable to fetch")
        
        print(f"Config File: {self.config_file}")
        print(f"Server URL: {self.server_url}")

def main():
    parser = argparse.ArgumentParser(
        description="Auto-WG Admin CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  wg-admin setup                          # Interactive setup
  wg-admin list                          # List all clients
  wg-admin add laptop-home               # Add new client
  wg-admin revoke laptop-home            # Revoke client access
  wg-admin health                        # Check server health
  wg-admin status                        # Show basic status
  wg-admin detailed-status               # Show detailed client status with connections
  wg-admin add-route laptop-home 192.168.1.0/24  # Add subnet route for client
  wg-admin remove-route laptop-home 192.168.1.0/24 # Remove subnet route
  wg-admin list-routes                   # List all routes
  wg-admin list-routes laptop-home       # List routes for specific client
        """
    )
    
    parser.add_argument('--config', '-c', 
                       help='Config file path (default: ~/.autowg/config)')
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Setup command
    setup_parser = subparsers.add_parser('setup', help='Setup configuration')
    setup_parser.add_argument('--server-url', help='Server URL')
    setup_parser.add_argument('--auth-key', help='Authentication key')
    
    # List command
    subparsers.add_parser('list', help='List all clients')
    
    # Add command
    add_parser = subparsers.add_parser('add', help='Add new client')
    add_parser.add_argument('client_name', help='Name of the client to add')
    
    # Revoke command
    revoke_parser = subparsers.add_parser('revoke', help='Revoke client access')
    revoke_parser.add_argument('client_name', help='Name of the client to revoke')
    
    # Health command
    subparsers.add_parser('health', help='Check server health')
    
    # Status command
    subparsers.add_parser('status', help='Show basic status')
    
    # Detailed status command
    subparsers.add_parser('detailed-status', help='Show detailed client status with connections')
    
    # Add route command
    add_route_parser = subparsers.add_parser('add-route', help='Add subnet route for client')
    add_route_parser.add_argument('client_name', help='Name of the client')
    add_route_parser.add_argument('subnet', help='Subnet in CIDR notation (e.g., 192.168.1.0/24)')
    
    # Remove route command
    remove_route_parser = subparsers.add_parser('remove-route', help='Remove subnet route for client')
    remove_route_parser.add_argument('client_name', help='Name of the client')
    remove_route_parser.add_argument('subnet', help='Subnet in CIDR notation (e.g., 192.168.1.0/24)')
    
    # List routes command
    list_routes_parser = subparsers.add_parser('list-routes', help='List subnet routes')
    list_routes_parser.add_argument('client_name', nargs='?', help='Optional: specific client name')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Handle setup command (doesn't need existing config)
    if args.command == 'setup':
        admin = WGAdmin.__new__(WGAdmin)
        admin.config_file = args.config or os.path.expanduser("~/.autowg/config")
        admin.setup_config(args.server_url, args.auth_key)
        return
    
    # For other commands, load existing config
    try:
        admin = WGAdmin(args.config)
    except SystemExit:
        print("\nüí° Tip: Run 'wg-admin setup' first to configure the tool")
        sys.exit(1)
    
    # Execute commands
    if args.command == 'list':
        admin.list_clients()
    elif args.command == 'add':
        admin.add_client(args.client_name)
    elif args.command == 'revoke':
        admin.revoke_client(args.client_name)
    elif args.command == 'health':
        admin.check_health()
    elif args.command == 'status':
        admin.show_status()
    elif args.command == 'detailed-status':
        admin.show_detailed_status()
    elif args.command == 'add-route':
        admin.add_route(args.client_name, args.subnet)
    elif args.command == 'remove-route':
        admin.remove_route(args.client_name, args.subnet)
    elif args.command == 'list-routes':
        admin.list_routes(args.client_name)

if __name__ == '__main__':
    main()