---
# Terraform Infrastructure Destruction (runs locally)
- hosts: localhost
  connection: local
  gather_facts: no
  
  tasks:
    - name: Check if Terraform directory exists
      stat:
        path: "{{ playbook_dir }}/../terraform"
      register: terraform_dir

    - name: Destroy Terraform infrastructure
      block:
        - name: Run terraform destroy
          shell: terraform destroy -auto-approve -var-file="terraform.tfvars"
          args:
            chdir: "{{ playbook_dir }}/../terraform"
          ignore_errors: yes
          register: terraform_destroy

        - name: Display Terraform destroy result
          debug:
            msg: "Terraform destroy result: {{ terraform_destroy.stdout if terraform_destroy.stdout else 'No output' }}"

        - name: Clean up Terraform state files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ playbook_dir }}/../terraform/.terraform"
            - "{{ playbook_dir }}/../terraform/.terraform.lock.hcl"
            - "{{ playbook_dir }}/../terraform/terraform.tfstate"
            - "{{ playbook_dir }}/../terraform/terraform.tfstate.backup"
            - "{{ playbook_dir }}/../terraform/terraform.tfvars"
          ignore_errors: yes
      when: terraform_dir.stat.exists

# Remote Server Cleanup (if still accessible)
- hosts: wireguard_servers
  become: yes
  vars_files:
    - vars/main.yml
  ignore_unreachable: yes
  
  tasks:
    - name: Stop and disable WireGuard service
      systemd:
        name: wg_service
        state: stopped
        enabled: no
      ignore_errors: yes

    - name: Stop and disable WireGuard interface
      systemd:
        name: wg-quick@wg0
        state: stopped
        enabled: no
      ignore_errors: yes

    - name: Stop and disable Caddy
      systemd:
        name: caddy
        state: stopped
        enabled: no
      ignore_errors: yes

    - name: Remove WireGuard service files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /opt/wg_service
        - /etc/systemd/system/wg_service.service
        - /etc/wireguard/wg0.conf
        - /etc/wireguard/private.key
        - /etc/wireguard/public.key

    - name: Remove Caddy configuration
      file:
        path: /etc/caddy/Caddyfile
        state: absent
      ignore_errors: yes

    - name: Remove SSL certificates (Let's Encrypt)
      file:
        path: /etc/letsencrypt
        state: absent
      ignore_errors: yes

    - name: Remove Python packages
      pip:
        name:
          - flask
          - flask-limiter
          - requests
        state: absent
      ignore_errors: yes

    - name: Remove WireGuard packages
      package:
        name:
          - wireguard
          - wireguard-tools
        state: absent
      ignore_errors: yes

    - name: Remove Caddy
      package:
        name: caddy
        state: absent
      ignore_errors: yes

    - name: Remove firewall rules
      ufw:
        rule: deny
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      loop:
        - { port: "{{ wireguard_port }}", proto: "udp" }
        - { port: "{{ wg_service_port }}", proto: "tcp" }
        - { port: "80", proto: "tcp" }
        - { port: "443", proto: "tcp" }
      ignore_errors: yes

    - name: Reset firewall to defaults
      ufw:
        state: reset
      ignore_errors: yes

    - name: Disable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '0'
        sysctl_set: yes
        state: present
        reload: yes
      ignore_errors: yes

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Display cleanup complete message
      debug:
        msg: "Auto-WG infrastructure has been completely removed from {{ inventory_hostname }}"

# Local Cleanup (runs after server cleanup)
- hosts: localhost
  connection: local
  gather_facts: no
  
  tasks:
    - name: Clean up local configuration files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ playbook_dir }}/inventory/hosts"
        - "{{ playbook_dir }}/inventory/vultr.yml"
        - "{{ playbook_dir }}/../deploy.config"
        - "{{ playbook_dir }}/../client"
      ignore_errors: yes

    - name: Display final cleanup message
      debug:
        msg: "Auto-WG complete destruction finished. All infrastructure, state files, and local configurations have been removed."