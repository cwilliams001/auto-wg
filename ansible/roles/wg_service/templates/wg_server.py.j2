from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import subprocess
import ipaddress
import json
import os
import secrets
import logging
import re
import hashlib
import time

app = Flask(__name__)

# Security: Generate secret key from environment or use a secure default
app.config['SECRET_KEY'] = os.environ.get('FLASK_SECRET_KEY', secrets.token_hex(32))

# Set up rate limiting
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["100 per hour", "10 per minute"]
)

# Set up secure logging
log_level = os.environ.get('LOG_LEVEL', 'INFO')
logging.basicConfig(
    level=getattr(logging, log_level.upper()),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('{{ wg_service_dir }}/wg_service.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configuration - Use environment variables for security
WG_CONFIG_PATH = "{{ wireguard_config_path | default('/etc/wireguard/wg0.conf') }}"
ALLOWED_KEYS = os.environ.get('WG_AUTH_KEYS', '{{ auth_keys | join(",") }}').split(',')
BASE_IP = os.environ.get('WG_BASE_IP', "10.0.0")
USED_IPS_FILE = "{{ wg_service_dir }}/used_ips.json"
ROUTES_FILE = "{{ wg_service_dir }}/client_routes.json"
MAX_CLIENT_NAME_LENGTH = 64

# WireGuard Server Configuration
SERVER_PUBLIC_KEY = "{{ wg_public_key }}"
SERVER_ENDPOINT = "{{ ansible_host }}"
SERVER_PORT = {{ wireguard_port }}
NETWORK_CIDR = "{{ wireguard_network }}"


def validate_client_name(client_name):
    """Validate and sanitize client name"""
    if not client_name:
        raise ValueError("Client name is required")
    
    if len(client_name) > MAX_CLIENT_NAME_LENGTH:
        raise ValueError(f"Client name too long (max {MAX_CLIENT_NAME_LENGTH} characters)")
    
    # Allow only alphanumeric characters, hyphens, and underscores
    if not re.match(r'^[a-zA-Z0-9_-]+$', client_name):
        raise ValueError("Client name contains invalid characters. Use only letters, numbers, hyphens, and underscores")
    
    return client_name.strip()

def validate_auth_key(auth_key):
    """Validate authentication key"""
    if not auth_key:
        raise ValueError("Authentication key is required")
    
    # Hash the key for comparison to prevent timing attacks
    provided_hash = hashlib.sha256(auth_key.encode()).hexdigest()
    valid_hashes = [hashlib.sha256(key.encode()).hexdigest() for key in ALLOWED_KEYS]
    
    if provided_hash not in valid_hashes:
        raise ValueError("Invalid authentication key")
    
    return True

def log_security_event(event_type, client_ip, details=None):
    """Log security-related events for audit purposes"""
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    log_entry = {
        'timestamp': timestamp,
        'event_type': event_type,
        'client_ip': client_ip,
        'details': details or {}
    }
    
    # Log to both application log and security log
    logger.warning(f"SECURITY_EVENT: {json.dumps(log_entry)}")
    
    # Also write to separate security log file
    security_log_path = "{{ wg_service_dir }}/security.log"
    try:
        with open(security_log_path, 'a') as f:
            f.write(f"{json.dumps(log_entry)}\n")
    except Exception as e:
        logger.error(f"Failed to write security log: {e}")

def revoke_client(client_name):
    """Revoke a client's access by removing from config and IP allocation"""
    try:
        # Load current used IPs
        used_ips = load_used_ips()
        
        if client_name not in used_ips:
            raise ValueError(f"Client {client_name} not found")
        
        client_ip = used_ips[client_name]
        
        # Remove from WireGuard config
        if os.path.exists(WG_CONFIG_PATH):
            with open(WG_CONFIG_PATH, 'r') as f:
                lines = f.readlines()
            
            # Filter out the client's peer section
            new_lines = []
            skip_section = False
            
            for line in lines:
                if line.strip() == f"# {client_name}":
                    skip_section = True
                    continue
                elif line.strip().startswith('# ') and skip_section:
                    skip_section = False
                    new_lines.append(line)
                elif line.strip().startswith('[Peer]') and skip_section:
                    # Skip the entire peer section
                    continue
                elif skip_section and (line.strip().startswith('PublicKey') or 
                                     line.strip().startswith('AllowedIPs')):
                    continue
                elif skip_section and line.strip() == '':
                    skip_section = False
                    continue
                else:
                    if not skip_section:
                        new_lines.append(line)
            
            # Write back the cleaned config
            with open(WG_CONFIG_PATH, 'w') as f:
                f.writelines(new_lines)
        
        # Remove from used IPs
        del used_ips[client_name]
        with open(USED_IPS_FILE, 'w') as f:
            json.dump(used_ips, f)
        
        # Reload WireGuard
        reload_wireguard()
        
        logger.info(f"Successfully revoked client: {client_name}")
        return True
        
    except Exception as e:
        logger.error(f"Error revoking client {client_name}: {str(e)}")
        raise

def load_client_routes():
    """Load client routes from file"""
    try:
        if os.path.exists(ROUTES_FILE):
            with open(ROUTES_FILE, 'r') as f:
                content = f.read().strip()
                if not content:
                    return {}
                return json.loads(content)
        else:
            with open(ROUTES_FILE, 'w') as f:
                json.dump({}, f)
            return {}
    except Exception as e:
        logger.error(f"Error loading client routes: {str(e)}")
        return {}

def save_client_routes(routes):
    """Save client routes to file"""
    try:
        os.makedirs(os.path.dirname(ROUTES_FILE), exist_ok=True)
        with open(ROUTES_FILE, 'w') as f:
            json.dump(routes, f, indent=2)
    except Exception as e:
        logger.error(f"Error saving client routes: {str(e)}")
        raise

def validate_subnet(subnet):
    """Validate subnet format (e.g., 192.168.1.0/24)"""
    try:
        network = ipaddress.ip_network(subnet, strict=True)
        # Ensure it's not overlapping with the VPN network
        vpn_network = ipaddress.ip_network(NETWORK_CIDR)
        if network.overlaps(vpn_network):
            raise ValueError(f"Subnet {subnet} overlaps with VPN network {NETWORK_CIDR}")
        return str(network)
    except ValueError as e:
        raise ValueError(f"Invalid subnet format: {subnet}. Error: {str(e)}")

def add_client_route(client_name, subnet):
    """Add a subnet route for a client"""
    try:
        # Validate inputs
        validate_client_name(client_name)
        validated_subnet = validate_subnet(subnet)
        
        # Check if client exists
        used_ips = load_used_ips()
        if client_name not in used_ips:
            raise ValueError(f"Client {client_name} not found")
        
        # Load existing routes
        routes = load_client_routes()
        if client_name not in routes:
            routes[client_name] = []
        
        # Check if route already exists
        if validated_subnet in routes[client_name]:
            raise ValueError(f"Route {validated_subnet} already exists for client {client_name}")
        
        # Add the route
        routes[client_name].append(validated_subnet)
        save_client_routes(routes)
        
        # Update WireGuard config
        update_wireguard_config()
        
        logger.info(f"Added route {validated_subnet} for client {client_name}")
        return True
        
    except Exception as e:
        logger.error(f"Error adding route for {client_name}: {str(e)}")
        raise

def remove_client_route(client_name, subnet):
    """Remove a subnet route for a client"""
    try:
        # Validate inputs
        validate_client_name(client_name)
        validated_subnet = validate_subnet(subnet)
        
        # Load existing routes
        routes = load_client_routes()
        if client_name not in routes or validated_subnet not in routes[client_name]:
            raise ValueError(f"Route {validated_subnet} not found for client {client_name}")
        
        # Remove the route
        routes[client_name].remove(validated_subnet)
        if not routes[client_name]:  # Remove empty client entry
            del routes[client_name]
        
        save_client_routes(routes)
        
        # Update WireGuard config
        update_wireguard_config()
        
        logger.info(f"Removed route {validated_subnet} for client {client_name}")
        return True
        
    except Exception as e:
        logger.error(f"Error removing route for {client_name}: {str(e)}")
        raise

def get_client_routes(client_name=None):
    """Get routes for a specific client or all routes"""
    try:
        routes = load_client_routes()
        if client_name:
            validate_client_name(client_name)
            return routes.get(client_name, [])
        return routes
    except Exception as e:
        logger.error(f"Error getting client routes: {str(e)}")
        return {} if client_name is None else []

def update_wireguard_config():
    """Update WireGuard configuration with current routes"""
    try:
        used_ips = load_used_ips()
        routes = load_client_routes()
        
        if not os.path.exists(WG_CONFIG_PATH):
            logger.warning("WireGuard config file not found")
            return
        
        # Read current config
        with open(WG_CONFIG_PATH, 'r') as f:
            lines = f.readlines()
        
        # Rebuild config with updated routes
        new_lines = []
        current_client = None
        in_peer_section = False
        
        for line in lines:
            if line.strip().startswith('# ') and not line.strip().startswith('## '):
                # Client comment line
                current_client = line.strip()[2:]  # Remove '# '
                in_peer_section = False
                new_lines.append(line)
            elif line.strip() == '[Peer]':
                in_peer_section = True
                new_lines.append(line)
            elif line.strip().startswith('AllowedIPs') and in_peer_section and current_client:
                # Replace AllowedIPs with client IP + routes
                client_ip = used_ips.get(current_client)
                if client_ip:
                    allowed_ips = [f"{client_ip}/32"]
                    if current_client in routes:
                        allowed_ips.extend(routes[current_client])
                    new_lines.append(f"AllowedIPs = {', '.join(allowed_ips)}\n")
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)
        
        # Write updated config
        with open(WG_CONFIG_PATH, 'w') as f:
            f.writelines(new_lines)
        
        # Reload WireGuard
        reload_wireguard()
        
        logger.info("WireGuard configuration updated with routes")
        
    except Exception as e:
        logger.error(f"Error updating WireGuard config: {str(e)}")
        raise

def get_client_status():
    """Get detailed client status information"""
    try:
        used_ips = load_used_ips()
        routes = load_client_routes()
        
        # Get WireGuard status
        wg_output = subprocess.run(["wg", "show"], capture_output=True, text=True, check=True)
        
        # Parse WireGuard output to get connection status
        clients = []
        for client_name, ip in used_ips.items():
            client_info = {
                'name': client_name,
                'ip': ip,
                'status': 'disconnected',
                'last_handshake': 'Never',
                'transfer_rx': '0 B',
                'transfer_tx': '0 B',
                'routes': routes.get(client_name, [])
            }
            
            # Look for this client in WireGuard output
            if f"{ip}/32" in wg_output.stdout:
                client_info['status'] = 'connected'
                # You could parse more detailed info from wg_output here
            
            clients.append(client_info)
        
        return clients
        
    except Exception as e:
        logger.error(f"Error getting client status: {str(e)}")
        return []

def load_used_ips():
    try:
        if os.path.exists(USED_IPS_FILE):
            with open(USED_IPS_FILE, 'r') as f:
                content = f.read().strip()
                if not content:  # If file is empty
                    return {}
                return json.loads(content)
        else:
            # Initialize the file with an empty JSON object
            with open(USED_IPS_FILE, 'w') as f:
                json.dump({}, f)
            return {}
    except Exception as e:
        logger.error(f"Error loading used IPs: {str(e)}")
        # Instead of raising, return empty dict
        return {}

def get_next_available_ip():
    try:
        used_ips = load_used_ips()
        used_ip_addresses = set(used_ips.values())
        
        # Start from .2 since .1 is typically the server
        for i in range(2, 255):
            candidate_ip = f"{BASE_IP}.{i}"  # This will create IPs like 10.0.0.2
            if candidate_ip not in used_ip_addresses:
                logger.debug(f"Found available IP: {candidate_ip}")
                # Validate IP format
                ipaddress.ip_address(candidate_ip)
                return candidate_ip
                
        raise Exception("No available IPs in the subnet")
    except Exception as e:
        logger.error(f"Error getting next available IP: {str(e)}")
        raise

def generate_wireguard_keys():
    try:
        logger.debug("Generating WireGuard keys")
        private_key = subprocess.check_output(["wg", "genkey"]).decode().strip()
        public_key = subprocess.check_output(["wg", "pubkey"], input=private_key.encode()).decode().strip()
        return private_key, public_key
    except Exception as e:
        logger.error(f"Error generating WireGuard keys: {str(e)}")
        raise

def clean_config_file():
    """Remove any malformed entries from the config file"""
    try:
        if os.path.exists(WG_CONFIG_PATH):
            with open(WG_CONFIG_PATH, 'r') as f:
                lines = f.readlines()
            
            # Filter out any lines with malformed IPs
            cleaned_lines = []
            for line in lines:
                if line.strip().startswith('AllowedIPs'):
                    # Validate IP format
                    try:
                        ip = line.split('=')[1].strip().split('/')[0]
                        ipaddress.ip_address(ip)
                        cleaned_lines.append(line)
                    except:
                        logger.warning(f"Removing malformed IP line: {line}")
                else:
                    cleaned_lines.append(line)
            
            # Write back cleaned config
            with open(WG_CONFIG_PATH, 'w') as f:
                f.writelines(cleaned_lines)
    except Exception as e:
        logger.error(f"Error cleaning config file: {str(e)}")

def reload_wireguard():
    """Reload WireGuard configuration"""
    try:
        # First check if the interface exists
        logger.debug("Checking WireGuard interface status")
        subprocess.run(["wg", "show"], check=True, capture_output=True, text=True)
        
        # Try syncconf first
        logger.debug("Attempting to sync WireGuard config")
        subprocess.run(["wg", "syncconf", "wg0", WG_CONFIG_PATH], check=True, capture_output=True, text=True)
        logger.info("WireGuard configuration reloaded successfully")
    except subprocess.CalledProcessError as e:
        logger.error(f"Error reloading WireGuard: {str(e)}")
        logger.error(f"Command output: {e.output if hasattr(e, 'output') else 'No output'}")
        
        # Try restarting the service if syncconf fails
        try:
            logger.debug("Attempting to restart WireGuard service")
            subprocess.run(["systemctl", "restart", "wg-quick@wg0"], check=True, capture_output=True, text=True)
            logger.info("WireGuard service restarted successfully")
        except subprocess.CalledProcessError as e:
            logger.error(f"Error restarting WireGuard service: {str(e)}")
            logger.error(f"Command output: {e.output if hasattr(e, 'output') else 'No output'}")
            raise

@app.route('/generate_config', methods=['POST'])
@limiter.limit("5 per minute")
def generate_config():
    client_ip = request.remote_addr
    
    try:
        # Validate authentication
        auth_key = request.headers.get('Authorization')
        
        try:
            validate_auth_key(auth_key)
        except ValueError as e:
            log_security_event('auth_failure', client_ip, {'error': str(e)})
            return jsonify({"error": "Unauthorized"}), 401
        
        # Parse and validate request
        try:
            request_json = request.get_json()
            if not request_json:
                raise ValueError("Invalid JSON format")
        except Exception as e:
            log_security_event('invalid_request', client_ip, {'error': str(e)})
            return jsonify({"error": f"Invalid JSON format: {str(e)}"}), 400

        # Validate client name
        try:
            client_name = validate_client_name(request_json.get('client_name'))
        except ValueError as e:
            log_security_event('invalid_client_name', client_ip, {'error': str(e)})
            return jsonify({"error": str(e)}), 400

        logger.info(f"Generating config for client: {client_name} from IP: {client_ip}")
        
        # Clean config file before adding new peer
        clean_config_file()
        
        # Generate keys and IP
        private_key, public_key = generate_wireguard_keys()
        client_ip = get_next_available_ip()
        
        # Validate IP format
        try:
            ipaddress.ip_address(client_ip)
            logger.debug(f"Valid IP address generated: {client_ip}")
        except ValueError as e:
            logger.error(f"Invalid IP address generated: {client_ip}")
            raise Exception(f"Invalid IP address format: {client_ip}")

        # Create client config
        client_config = f"""[Interface]
PrivateKey = {private_key}
Address = {client_ip}/24
DNS = 9.9.9.9, 1.1.1.1

[Peer]
PublicKey = {SERVER_PUBLIC_KEY}
Endpoint = {SERVER_ENDPOINT}:{SERVER_PORT}
AllowedIPs = {NETWORK_CIDR}
PersistentKeepalive = 25"""

        # Update server config
        server_config_addition = f"""
# {client_name}
[Peer]
PublicKey = {public_key}
AllowedIPs = {client_ip}/32
"""
        
        # Backup the current config
        if os.path.exists(WG_CONFIG_PATH):
            backup_path = f"{WG_CONFIG_PATH}.bak"
            with open(WG_CONFIG_PATH, 'r') as src, open(backup_path, 'w') as dst:
                dst.write(src.read())
        
        # Append new peer to server config
        with open(WG_CONFIG_PATH, 'a') as f:
            f.write(server_config_addition)

        # Save used IP
        used_ips = load_used_ips()
        used_ips[client_name] = client_ip
        
        os.makedirs(os.path.dirname(USED_IPS_FILE), exist_ok=True)
        with open(USED_IPS_FILE, 'w') as f:
            json.dump(used_ips, f)

        # Reload WireGuard configuration
        reload_wireguard()

        response_data = {
            "config": client_config,
            "ip": client_ip
        }
        
        # Log successful config generation
        log_security_event('config_generated', request.remote_addr, {
            'client_name': client_name,
            'assigned_ip': client_ip
        })
        
        logger.info(f"Successfully generated config for {client_name}")
        return jsonify(response_data)

    except Exception as e:
        log_security_event('config_generation_error', request.remote_addr, {
            'error': str(e),
            'client_name': request_json.get('client_name') if 'request_json' in locals() else 'unknown'
        })
        logger.error(f"Error generating config: {str(e)}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

@app.route('/list_clients', methods=['GET'])
@limiter.limit("10 per minute")
def list_clients():
    client_ip = request.remote_addr
    
    try:
        # Validate authentication
        auth_key = request.headers.get('Authorization')
        
        try:
            validate_auth_key(auth_key)
        except ValueError as e:
            log_security_event('auth_failure', client_ip, {'endpoint': 'list_clients'})
            return jsonify({"error": "Unauthorized"}), 401
        
        used_ips = load_used_ips()
        
        log_security_event('clients_listed', client_ip, {'client_count': len(used_ips)})
        return jsonify(used_ips)
        
    except Exception as e:
        log_security_event('list_clients_error', client_ip, {'error': str(e)})
        logger.error(f"Error listing clients: {str(e)}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

@app.route('/revoke_client', methods=['POST'])
@limiter.limit("5 per minute")
def revoke_client_endpoint():
    client_ip = request.remote_addr
    
    try:
        # Validate authentication
        auth_key = request.headers.get('Authorization')
        
        try:
            validate_auth_key(auth_key)
        except ValueError as e:
            log_security_event('auth_failure', client_ip, {'endpoint': 'revoke_client'})
            return jsonify({"error": "Unauthorized"}), 401
        
        # Parse and validate request
        try:
            request_json = request.get_json()
            if not request_json:
                raise ValueError("Invalid JSON format")
        except Exception as e:
            log_security_event('invalid_request', client_ip, {'error': str(e)})
            return jsonify({"error": f"Invalid JSON format: {str(e)}"}), 400

        # Validate client name
        try:
            client_name = validate_client_name(request_json.get('client_name'))
        except ValueError as e:
            log_security_event('invalid_client_name', client_ip, {'error': str(e)})
            return jsonify({"error": str(e)}), 400

        logger.info(f"Revoking client: {client_name} from IP: {client_ip}")
        
        # Revoke the client
        revoke_client(client_name)
        
        # Log successful revocation
        log_security_event('client_revoked', client_ip, {
            'client_name': client_name
        })
        
        logger.info(f"Successfully revoked client: {client_name}")
        return jsonify({"message": f"Client '{client_name}' revoked successfully"})

    except ValueError as e:
        log_security_event('revoke_client_error', client_ip, {
            'error': str(e),
            'client_name': request_json.get('client_name') if 'request_json' in locals() else 'unknown'
        })
        logger.warning(f"Revoke client error: {str(e)}")
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        log_security_event('revoke_client_error', client_ip, {
            'error': str(e),
            'client_name': request_json.get('client_name') if 'request_json' in locals() else 'unknown'
        })
        logger.error(f"Error revoking client: {str(e)}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

@app.route('/client_status', methods=['GET'])
@limiter.limit("10 per minute")
def client_status_endpoint():
    client_ip = request.remote_addr
    
    try:
        # Validate authentication
        auth_key = request.headers.get('Authorization')
        
        try:
            validate_auth_key(auth_key)
        except ValueError as e:
            log_security_event('auth_failure', client_ip, {'endpoint': 'client_status'})
            return jsonify({"error": "Unauthorized"}), 401
        
        clients = get_client_status()
        
        log_security_event('client_status_accessed', client_ip, {'client_count': len(clients)})
        return jsonify({"clients": clients})
        
    except Exception as e:
        log_security_event('client_status_error', client_ip, {'error': str(e)})
        logger.error(f"Error getting client status: {str(e)}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

@app.route('/add_route', methods=['POST'])
@limiter.limit("5 per minute")
def add_route_endpoint():
    client_ip = request.remote_addr
    
    try:
        # Validate authentication
        auth_key = request.headers.get('Authorization')
        
        try:
            validate_auth_key(auth_key)
        except ValueError as e:
            log_security_event('auth_failure', client_ip, {'endpoint': 'add_route'})
            return jsonify({"error": "Unauthorized"}), 401
        
        # Parse and validate request
        try:
            request_json = request.get_json()
            if not request_json:
                raise ValueError("Invalid JSON format")
        except Exception as e:
            log_security_event('invalid_request', client_ip, {'error': str(e)})
            return jsonify({"error": f"Invalid JSON format: {str(e)}"}), 400

        # Validate parameters
        try:
            client_name = validate_client_name(request_json.get('client_name'))
            subnet = request_json.get('subnet')
            if not subnet:
                raise ValueError("Subnet is required")
        except ValueError as e:
            return jsonify({"error": str(e)}), 400

        logger.info(f"Adding route {subnet} for client {client_name} from IP: {client_ip}")
        
        # Add the route
        add_client_route(client_name, subnet)
        
        # Log successful route addition
        log_security_event('route_added', client_ip, {
            'client_name': client_name,
            'subnet': subnet
        })
        
        logger.info(f"Successfully added route {subnet} for client {client_name}")
        return jsonify({"message": f"Route {subnet} added for client '{client_name}'"})

    except ValueError as e:
        log_security_event('add_route_error', client_ip, {
            'error': str(e),
            'client_name': request_json.get('client_name') if 'request_json' in locals() else 'unknown'
        })
        logger.warning(f"Add route error: {str(e)}")
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        log_security_event('add_route_error', client_ip, {
            'error': str(e),
            'client_name': request_json.get('client_name') if 'request_json' in locals() else 'unknown'
        })
        logger.error(f"Error adding route: {str(e)}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

@app.route('/remove_route', methods=['POST'])
@limiter.limit("5 per minute")
def remove_route_endpoint():
    client_ip = request.remote_addr
    
    try:
        # Validate authentication
        auth_key = request.headers.get('Authorization')
        
        try:
            validate_auth_key(auth_key)
        except ValueError as e:
            log_security_event('auth_failure', client_ip, {'endpoint': 'remove_route'})
            return jsonify({"error": "Unauthorized"}), 401
        
        # Parse and validate request
        try:
            request_json = request.get_json()
            if not request_json:
                raise ValueError("Invalid JSON format")
        except Exception as e:
            log_security_event('invalid_request', client_ip, {'error': str(e)})
            return jsonify({"error": f"Invalid JSON format: {str(e)}"}), 400

        # Validate parameters
        try:
            client_name = validate_client_name(request_json.get('client_name'))
            subnet = request_json.get('subnet')
            if not subnet:
                raise ValueError("Subnet is required")
        except ValueError as e:
            return jsonify({"error": str(e)}), 400

        logger.info(f"Removing route {subnet} for client {client_name} from IP: {client_ip}")
        
        # Remove the route
        remove_client_route(client_name, subnet)
        
        # Log successful route removal
        log_security_event('route_removed', client_ip, {
            'client_name': client_name,
            'subnet': subnet
        })
        
        logger.info(f"Successfully removed route {subnet} for client {client_name}")
        return jsonify({"message": f"Route {subnet} removed from client '{client_name}'"})

    except ValueError as e:
        log_security_event('remove_route_error', client_ip, {
            'error': str(e),
            'client_name': request_json.get('client_name') if 'request_json' in locals() else 'unknown'
        })
        logger.warning(f"Remove route error: {str(e)}")
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        log_security_event('remove_route_error', client_ip, {
            'error': str(e),
            'client_name': request_json.get('client_name') if 'request_json' in locals() else 'unknown'
        })
        logger.error(f"Error removing route: {str(e)}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

@app.route('/list_routes', methods=['GET'])
@limiter.limit("10 per minute")
def list_routes_endpoint():
    client_ip = request.remote_addr
    
    try:
        # Validate authentication
        auth_key = request.headers.get('Authorization')
        
        try:
            validate_auth_key(auth_key)
        except ValueError as e:
            log_security_event('auth_failure', client_ip, {'endpoint': 'list_routes'})
            return jsonify({"error": "Unauthorized"}), 401
        
        # Get optional client_name parameter
        client_name = request.args.get('client_name')
        
        if client_name:
            try:
                validate_client_name(client_name)
                routes = get_client_routes(client_name)
                result = {client_name: routes}
            except ValueError as e:
                return jsonify({"error": str(e)}), 400
        else:
            routes = get_client_routes()
            result = routes
        
        log_security_event('routes_listed', client_ip, {
            'client_name': client_name or 'all',
            'route_count': len(result)
        })
        
        return jsonify({"routes": result})
        
    except Exception as e:
        log_security_event('list_routes_error', client_ip, {'error': str(e)})
        logger.error(f"Error listing routes: {str(e)}", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500

@app.route('/health', methods=['GET'])
@limiter.limit("30 per minute")
def health_check():
    try:
        # Check if WireGuard is running
        subprocess.run(["wg", "show"], check=True, capture_output=True)
        return jsonify({"status": "healthy", "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')})
    except Exception as e:
        logger.error(f"Health check failed: {str(e)}")
        return jsonify({"status": "unhealthy", "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')}), 500


if __name__ == '__main__':
    # Ensure the USED_IPS_FILE directory exists
    os.makedirs(os.path.dirname(USED_IPS_FILE), exist_ok=True)
    
    # Initialize used_ips.json if it doesn't exist
    if not os.path.exists(USED_IPS_FILE):
        with open(USED_IPS_FILE, 'w') as f:
            json.dump({}, f)
    
    # Initialize client_routes.json if it doesn't exist
    if not os.path.exists(ROUTES_FILE):
        with open(ROUTES_FILE, 'w') as f:
            json.dump({}, f)
    
    # Security: Disable debug mode in production
    debug_mode = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'
    
    # Set secure file permissions for sensitive files
    try:
        os.chmod(USED_IPS_FILE, 0o600)
        if os.path.exists("{{ wg_service_dir }}/security.log"):
            os.chmod("{{ wg_service_dir }}/security.log", 0o600)
    except Exception as e:
        logger.warning(f"Could not set secure file permissions: {e}")
    
    logger.info(f"Starting WireGuard service on localhost:{{ wg_service_port }} (debug={debug_mode})")
    app.run(host='127.0.0.1', port={{ wg_service_port }}, debug=debug_mode)