import requests
import subprocess
import os
import sys
import platform

SERVER_URL = "{{ wireguard_server_url }}"
AUTH_KEY = "{{ auth_keys[0] }}"
WG_CONFIG_PATH = "/etc/wireguard/wg0.conf"

def check_dependencies():
    """Check if all required dependencies are installed"""
    required_commands = ['wg', 'resolvconf']
    missing = []
    for cmd in required_commands:
        try:
            subprocess.run(['which', cmd], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        except subprocess.CalledProcessError:
            missing.append(cmd)
    return missing

def install_wireguard():
    """Install WireGuard and required dependencies"""
    system = platform.system().lower()
    try:
        if system == 'linux':
            # Update package list
            subprocess.run(["apt", "update"], check=True)
            # Install WireGuard and required dependencies
            subprocess.run([
                "apt", "install", "-y",
                "wireguard",
                "resolvconf"
            ], check=True)
            print("WireGuard and dependencies installed successfully")
        else:
            print(f"Unsupported operating system: {system}")
            sys.exit(1)
    except subprocess.CalledProcessError as e:
        print(f"Error installing WireGuard: {str(e)}")
        sys.exit(1)

def setup_wireguard():
    # Check dependencies
    missing_deps = check_dependencies()
    if missing_deps:
        print(f"Missing dependencies: {', '.join(missing_deps)}")
        print("Installing required packages...")
        install_wireguard()

    # Get hostname for client name
    hostname = subprocess.check_output(["hostname"]).decode().strip()

    print(f"Requesting config for {hostname}...")
    try:
        # Request config from server
        response = requests.post(
            SERVER_URL,
            headers={"Authorization": AUTH_KEY},
            json={"client_name": hostname}
        )

        if response.status_code != 200:
            print(f"Error: {response.json().get('error', 'Unknown error')}")
            sys.exit(1)

        # Create WireGuard directory if it doesn't exist
        os.makedirs(os.path.dirname(WG_CONFIG_PATH), exist_ok=True)

        # Save config
        config = response.json()["config"]
        with open(WG_CONFIG_PATH, 'w') as f:
            f.write(config)

        # Set proper permissions
        os.chmod(WG_CONFIG_PATH, 0o600)
        print("WireGuard configuration saved successfully")

        # Enable and start WireGuard
        try:
            # Make sure resolvconf service is running
            subprocess.run(["systemctl", "start", "resolvconf.service"], check=True)

            # Enable and start WireGuard
            subprocess.run(["systemctl", "enable", "wg-quick@wg0"], check=True)
            subprocess.run(["systemctl", "restart", "wg-quick@wg0"], check=True)
            print("WireGuard service enabled and started")
        except subprocess.CalledProcessError as e:
            print(f"Error managing WireGuard service: {str(e)}")
            sys.exit(1)

        print(f"WireGuard configured with IP: {response.json()['ip']}")

        # Verify connection
        try:
            subprocess.run(["wg", "show"], check=True)
            print("WireGuard interface is up and running")
        except subprocess.CalledProcessError as e:
            print(f"Warning: Could not verify WireGuard interface: {str(e)}")

    except requests.exceptions.RequestException as e:
        print(f"Error communicating with server: {str(e)}")
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    # Check if running as root
    if os.geteuid() != 0:
        print("This script must be run as root")
        sys.exit(1)

    print("Starting WireGuard setup...")
    setup_wireguard()
